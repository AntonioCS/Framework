<?php



class acs_log {
	
	private static $_instance = null;
	private $_configData; 	
    
    private $_debugFirebug = array();	
    
    /**
    * In case I need to show one debug msg
    * 
    * @var bool
    */
    private $_tempShowdebug = false;
	
	
	/*
		Value  	Constant  									Description  																									Note
		1		E_ERROR (integer) 						Fatal run-time errors. 
																						These indicate errors that can not be recovered from, 
																					such as a memory allocation problem. Execution of the script is halted. 	 
		2 		E_WARNING (integer) 						Run-time warnings (non-fatal errors). Execution of the script is not halted. 	 
		
		4 		E_PARSE (integer) 						Compile-time parse errors. Parse errors should only be generated by the parser. 	 
		
		8 		E_NOTICE (integer) 						Run-time notices. Indicate that the script encountered something that could indicate an error, 
															but could also happen in the normal course of running a script. 	 
																					
		16 		E_CORE_ERROR (integer) 					Fatal errors that occur during PHP's initial startup. 
															This is like an E_ERROR, except it is generated by the core of PHP. 											since PHP 4
																					
		32 		E_CORE_WARNING (integer)				Warnings (non-fatal errors) that occur during PHP's initial startup. 
															This is like an E_WARNING, except it is generated by the core of PHP. 										since PHP 4
																					
		64 		E_COMPILE_ERROR (integer) 				Fatal compile-time errors. This is like an E_ERROR, 
															except it is generated by the Zend Scripting Engine. 															since PHP 4
																					
		128 	E_COMPILE_WARNING (integer) 			Compile-time warnings (non-fatal errors). This is like an E_WARNING, 
															except it is generated by the Zend Scripting Engine. 															since PHP 4
																					
		256 	E_USER_ERROR (integer) 					User-generated error message. This is like an E_ERROR, 
															except it is generated in PHP code by using the PHP function trigger_error(). 								since PHP 4
																					
		512 	E_USER_WARNING (integer) 				User-generated warning message. This is like an E_WARNING, 
															except it is generated in PHP code by using the PHP function trigger_error(). 								since PHP 4
																					
		1024 	E_USER_NOTICE (integer) 				User-generated notice message. This is like an E_NOTICE, 
															except it is generated in PHP code by using the PHP function trigger_error(). 								since PHP 4
																					
		2048 	E_STRICT (integer) 						Run-time notices. Enable to have PHP suggest changes to your code
															which will ensure the best interoperability and forward compatibility of your code. 							since PHP 5
																					
		4096 	E_RECOVERABLE_ERROR (integer) 		Catchable fatal error. It indicates that a probably dangerous error occured,
															but did not leave the Engine in an unstable state. 
															If the error is not caught by a user defined handle (see also set_error_handler()),
															the application aborts as it was an E_ERROR. 																	since PHP 5.2.0
																					
		8191 		E_ALL (integer) 						All errors and warnings, as supported, 
															except of level E_STRICT in PHP < 6. 																			6143 in PHP 5.2.x and 2047 previously		
	//*/
		
	private $_errortype = array (
								                E_ERROR              => 'Error',
								                E_WARNING            => 'Warning',
								                E_PARSE              => 'Parsing Error',
								                E_NOTICE             => 'Notice',
								                E_CORE_ERROR         => 'Core Error',
								                E_CORE_WARNING       => 'Core Warning',
								                E_COMPILE_ERROR      => 'Compile Error',
								                E_COMPILE_WARNING    => 'Compile Warning',
								                E_USER_ERROR         => 'User Error',
								                E_USER_WARNING       => 'User Warning',
								                E_USER_NOTICE        => 'User Notice',
								                E_STRICT             => 'Runtime Notice',
								                E_RECOVERABLE_ERROR  => 'Catchable Fatal Error'
                							);
	
	/**
	* Returns the instance of this class
	*
	* @return acs_log instance
	*/
	public static function getInstance() {
		if (!self::$_instance)
			self::$_instance = new acs_log;
        /** @var acs_log */
		return self::$_instance;		
	}
	
	private function __construct() {
		$this->_configData = acs_config::getInstance();
		
		if ($this->_configData->logErrors || $this->_configData->logAccess || $this->_configData->DebugToLogFile)
			if (!is_writable($this->_configData->logsDir)) {
                exit("Unable to write to log dir: " . $this->_configData->logsDir);
            }
                //throw new acs_exception(LOG_DIR_NOT_WRITTABLE);
				//throw new acs_exception("Log dir not writtable");
	}
	
	/**
	* Access logging method
	* 	
	* @param string $text
	*/
	public function accesslog($text) {		
		if ($this->_configData->logAccess) 
			$this->writetofile(
				$this->accessFile(), 
				$this->logprefix() . $text
			);
	}
	public function errorlog($error_msg,$type = E_ERROR) {
		if ($this->_configData->logErrors)
			$this->writetofile(
				$this->errorFile(),
				$this->logprefix() . '(' . $this->_errortype[$type] . ') ' . PHP_EOL . 'Error: ' . $error_msg
			);
	}
	
	/**
	* Debug method do log messages
	* 
	* This will take as many arguments as needed 	
	*/
	public function debug() {
		$msg = '';
		
		for ($i = 0, $t = func_num_args(); $i < $t; $i++) {
			$arg = func_get_arg($i);
			if (is_array($arg) || is_object($arg)) 
				$msg .= $this->pre(print_r($arg,true));
			else 
				$msg .= $arg;
		}
	
		$debugData = debug_backtrace();
		$msg = 'Debug: ' . $debugData[0]['file'] . " ({$debugData[0]['line']})" . ' - ' . $msg . '<br />' . PHP_EOL;
				
		if ($this->_configData->DebugMsgsOutput || $this->_tempShowdebug) {
			echo '<br /> ' . PHP_EOL . $msg;
            $this->_tempShowdebug = false;
		}
        
        
        $msg = str_replace(array('<br />','<pre>','</pre>'),'', $msg);
        
		if ($this->_configData->DebugToLogFile)
			$this->writetofile(
				$this->debugFile(),
                date('Y-m-d G:i:s') . PHP_EOL . $msg				
			);
            
        if ($this->_configData->DebugToFirebug) 
            $this->_debugFirebug[] = str_replace(PHP_EOL,'',$msg);
	}
    
    /**
    * Set the tempShowdebug to true to temporarily show a debug msg on screen
    * 
    * 
    * return @var acs_log
    */
    public function showdebug() {
        $this->_tempShowdebug = true;
        return $this;
    }    
    
    /**
    * Return firebug msg's 
    * 
    */
    public function debugFirebug() {
        return "'" . implode("','",$this->_debugFirebug) . "'";
    }
    
    public function is_logmsgFirebug() {
        return (bool)count($this->_debugFirebug);
    }
    
	
    // TODO: Add way to send a log to the administrator
	private function emailErrorLog($email,$data) {
		
	}
    
	/**
    * Encapsulate the text in <pre> tag and PHP_EOL
    * 
    * @param mixed $data
    */
	private function pre($data) {
		return '<pre>' . PHP_EOL . $data . PHP_EOL .'</pre>';	
	}
	
    
    /**
    * Methods to return the log dir plus the file in question
    * 
    */
	private function errorFile() {
		return $this->_configData->logsDir . $this->_configData->errorLogFile;
	}	
	private function accessFile() {
		return $this->_configData->logsDir . $this->_configData->accessLogFile;	
	}
	private function debugFile() {
		return $this->_configData->logsDir . $this->_configData->debugLogFile;	
	}
	
	/**
    * Prefix for the log messages
    * 
    */
	private function logprefix() {
		return $_SERVER['REMOTE_ADDR'] . ' ' . (isset($_SERVER['HTTP_REFERER']) ?  $_SERVER['HTTP_REFERER'] : '') . ' - ' . date('Y-m-d G:i:s') . ' - ' . $_SERVER['REQUEST_METHOD'] . ' - ' . date('Y-m-d G:i:s',$_SERVER['REQUEST_TIME']) . ': ';
	}
    
    /**
    * Method to write to the specified file the given text
    * 
    * @param string $file
    * @param string $text
    */
	private function writetofile($file,$text) {
		file_put_contents($file,$text . PHP_EOL,FILE_APPEND);							
	}
}
