<?php


class acs_model_form extends acs_base {

	/**
	 * This propertie will hold the acs_form class
	 *
	 * @var acs_form
	 */
	protected $form = null;

    /**
    * Hold the name of the model
    *
    * @var string
    */
    protected $_mname;

    /**
    * module name with no '_form'
    *
    * @var string
    */
    protected $_mname_noform;

	/**
	 * Cache for the form class
	 * @var acs_cache
	 */
	protected $_formCache = null;

	public $formname = null;

	//public $cache = false;

	public function __construct() {
        parent::__construct();

        $this->_mname = get_class($this);

        $this->_mname_noform = $modelname = str_replace('_form','',$this->_mname);

        //TODO: Implement cache here so that I don't have to recreate the form object every time

        $rc = new ReflectionClass(get_class($this));
        $dirmodule = str_replace(
                                array(
                                    $this->configData->acs_model_dir,
                                    $this->configData->model_dir,
                                ),
                                '',
                                dirname($rc->getFileName()) . '/'  //The directories all have /  so this one must also have it
                                );

		$this->form = new acs_form($modelname);

        if ($dirmodule) {
            $modelpath = $dirmodule .'/' . $modelname;
        }
        else
            $modelpath = $modelname;

		//Set the action (the model from where this is called)
		//The user can still overwrite this
		$this->form->action = $this->configData->uri . 'processForms/' . $modelpath;

        $this->body();
	}

	/**
	 * This method contains the code of the form
	 *
	 */
	public function body() {}

	/**
	 *	Return instance of the form element
	 *
	 * @return acs_form
	 */
	public function form() {
		return $this->form;
	}


    /**
    * Return the html generated by form
    *
    */
	public function callForm() {

     $m = acs_msg::getInstance();

     //$m = acs_msg::getInstance();

        /*
      $d = $m->getmsg_clear($this->_mname . '_pdata');
        if ($d)

        */
        if (isset($_POST) && isset($_POST['fname']) && $_POST['fname'] == $this->_mname_noform) {
            $this->validate($_POST);
            //$this->form->populate($d);

        }

		return $this->form->html();
	}

	/**
	 * Check for token in $data
	 *
	 * @param array $data
	 * @return bool
	 *
	 */
	public function checkForToken($data) {
		//If this is false I must always validate
		if (!$this->configData->use_form_token)
			return true;


		//Must collect all parameters (action and data) because the model may be in a subdirectory

		/*
		var_dump(
			$this->post->token->value != $this->session->getToken($this->post->token_name->value),
			$this->post->token->value,
			$this->session->getToken($this->post->token_name->value)
			);
		*/
		if (($data->token->isNull() || $data->token_name->isNull() ||
					$data->token->value != acs_session::getInstance()->getToken($data->token_name->value))) {
				return false;
		}

		$this->session->deleteToken($this->post->token_name->value);
		return true;


	}

    public function validate($data) {
        $this->checkForToken($data);

    }

	/**
	 * Implement here how to handle the data given by the user
	 *
	 * @param post (model) $postdata
	 */
	public function process($data) {}
}
